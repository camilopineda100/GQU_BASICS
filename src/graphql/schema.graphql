type Query {
    agent(id: ID!): User
    agents(name: String, age: Int): [User]
    posts: [Post!]!
    post(id: ID!): Post
    pictures: [Picture!]!
    picture(id: ID!): Picture
}

type Mutation {
    createAgent(data: CreateAgentInput!): User!
    createPost(title: String!, content: String!, status: PostStatus!): Post!
    deletePost(id: ID): Boolean!
    deleteAgent(id: ID): Boolean!
    updateAgent(id: ID!, data: UpdateAgentInput!): User!
}

enum PostStatus {
    PUBLISHED
    DRAFT
}

enum AgentStatus {
    active
    not_active
    trainee
    guest
}

input CreateAgentInput {
    name: String!, 
    age: Int!, 
    married: Boolean,
    status: AgentStatus!
}

input UpdateAgentInput {
    name: String, 
    age: Int, 
    married: Boolean, 
    average: Float,
    status: AgentStatus
}

type User {
    id: ID
    name: String
    age: Int
    married: Boolean
    average: Float
    status: AgentStatus!
    posts: [Post!]!
    pictures: [Picture!]!
}

type Post {
    id: ID
    title: String
    content: String
    author: User!
    picture: Picture!
    status: PostStatus
}

type Picture {
    id: ID
    path: String
    author: User!
    post: Post!
}